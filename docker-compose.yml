version: '3.8'

services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - kafka_network

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - ALLOW_PLAINTEXT_LISTENER=yes
    networks:
      - kafka_network

  spark-master:
    build:
      context: .
      dockerfile: Dockerfile.spark
    hostname: spark-master
    container_name: spark-master
    environment:
      - SPARK_MASTER_HOST=spark-master
    ports:
      - "8080:8080"
      - "7077:7077"
    command: ["/start-master.sh"]
    networks:
      - kafka_network

  spark-worker-1:
    build:
      context: .
      dockerfile: Dockerfile.spark
    hostname: spark-worker-1
    container_name: spark-worker-1
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2g
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    command: ["/start-worker.sh"]
    networks:
      - kafka_network

  spark-worker-2:
    build:
      context: .
      dockerfile: Dockerfile.spark
    hostname: spark-worker-2
    container_name: spark-worker-2
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2g
    depends_on:
      - spark-master
    ports:
      - "8082:8082"
    command: ["/start-worker.sh"]
    networks:
      - kafka_network

  spark-worker-3:
    build:
      context: .
      dockerfile: Dockerfile.spark
    hostname: spark-worker-3
    container_name: spark-worker-3
    environment:
      - SPARK_MASTER=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2g
    depends_on:
      - spark-master
    ports:
      - "8083:8083"
    command: ["/start-worker.sh"]
    networks:
      - kafka_network

  hadoop:
    image: apache/hadoop:3.3.6
    environment:
      - HDFS_NAMENODE_USER=root
      - HDFS_DATANODE_USER=root
      - HDFS_SECONDARYNAMENODE_USER=root
    ports:
      - "9870:9870"
      - "9000:9000"
    networks:
      - kafka_network

  api:
    build:
      context: .
      dockerfile: backend/Dockerfile
    image: git.ecdf.ed.ac.uk:5050/sdol2425/duncan-proctor/sports_project/backend:latest
    ports:
      - "8000:8000"
    depends_on:
      - zookeeper
      - kafka
      - spark-master
      - hadoop
    environment:
      KAFKA_BROKER_URL: kafka:9092
      SPARK_MASTER_URL: spark://spark-master:7077
      HADOOP_URL: hdfs://hadoop:9000
    entrypoint: ["/bin/sh", "-c", "sleep 10 && uvicorn backend.app:app --host 0.0.0.0 --port 8000"]
    networks:
      - kafka_network

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: frontend
    ports:
      - "3000:3000"  # Map the development server's port 3000 to the host
    stdin_open: true  # Keep the container open for interactive input
    tty: true         # Allocate a pseudo-TTY for the container
    environment:
      - NODE_ENV=development  # Optional: Explicitly set the environment to development
    networks:
      - kafka_network

networks:
  kafka_network:
    driver: bridge
